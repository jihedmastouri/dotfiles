#!/usr/bin/env bash

# playground - A script to manage playground directories
# Usage: playground [command] [args...]

PLAYGROUND_BASE="$HOME/devenv/playground"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print colored output
print_color() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Initialize playground directory structure
init_playground() {
    if [[ ! -d "$PLAYGROUND_BASE" ]]; then
        mkdir -p "$PLAYGROUND_BASE"
        print_color $GREEN "Created playground directory: $PLAYGROUND_BASE"
    fi
}

# Get timestamp for directory naming
get_timestamp() {
    date +"%Y%m%d_%H%M%S"
}

# List all available groups (subdirectories)
list_groups() {
    if [[ -d "$PLAYGROUND_BASE" ]]; then
        find "$PLAYGROUND_BASE" -mindepth 1 -maxdepth 1 -type d -exec basename {} \; | sort
    fi
}


get_select_name() {
	local selected=$1
	echo $(echo "$selected" | awk -F/ '{print $(NF)}')
}

get_full_path() {
	local selected=$1
	echo "$PLAYGROUND_BASE/$selected"
}

create_tmux_session() {
	local selected=$1

	local selected_name=$(get_select_name $selected)
	local full_path=$(get_full_path $selected)

	tmux_running=$(pgrep tmux)
	if [[ -z $TMUX ]] || [[ -z $tmux_running ]]; then
		tmux new-session -s "$selected_name" -c $full_path
		tmux attach-session -t "$selected_name"
	fi

	if ! tmux has-session -t=$selected_name 2> /dev/null; then
		tmux new-session -ds "$selected_name" -c "$full_path"
	fi

	tmux switch-client -t $selected_name
}



# Create a new playground
new_playground() {
    local name=$1
    if [[ -z "$name" ]]; then
        print_color $RED "Error: Please provide a name for the playground"
        echo "Usage: playground new <name> [group]"
        exit 1
    fi

    # Ask for group if not provided
    local group=$2
    if [[ -z "$group" ]]; then
        local groups=($(list_groups))
        if [[ ${#groups[@]} -gt 0 ]]; then
            local options=("${groups[@]}" "Create new group")
            local selected=$(gum choose --header="Select group:" "${options[@]}")
            if [[ "$selected" == "Create new group" ]]; then
                group=$(gum input --prompt="Enter new group name: " --placeholder="group name")
                if [[ -z "$group" ]]; then
                    print_color $RED "Error: Group name cannot be empty"
                    exit 1
                fi
            elif [[ -n "$selected" ]]; then
                group="$selected"
            else
                group="misc"
            fi
        else
            group="misc"
        fi
    fi

    local timestamp=$(get_timestamp)
    local dir_name="${timestamp}_${name}"
	local selected="$group/$dir_name"
	local full_path=$(get_full_path $selected)

    mkdir -p "$full_path"
    print_color $GREEN "Created playground: $full_path"

	create_tmux_session $selected
}

fuzzy_finder() {
    if ! command -v gum &> /dev/null; then
        print_color $RED "Error: gum is not installed. Please install gum to use the fuzzy finder."
        exit 1
    fi


    if [[ ! -d "$PLAYGROUND_BASE" ]]; then
        print_color $RED "No playground directory found. Use 'playground new <name>' to create your first playground."
        exit 1
    fi

    # Find all playground directories
    local playgrounds=($(find "$PLAYGROUND_BASE" -mindepth 2 -maxdepth 2 -type d | sort))

    if [[ ${#playgrounds[@]} -eq 0 ]]; then
        print_color $YELLOW "No playgrounds found. Use 'playground new <name>' to create one."
        exit 0
    fi

    # Strip base path for display
    local playgrounds_stripped=()
    for p in "${playgrounds[@]}"; do
        playgrounds_stripped+=("${p#$PLAYGROUND_BASE/}")
    done

    # Use gum to select a playground
    local selected=$(printf '%s\n' "${playgrounds_stripped[@]}" | gum choose --header="Select playground:")

	echo $selected
}

remove_fuzzy_finder() {
	local selected=$(fuzzy_finder)

    if [[ -z "$selected" ]]; then
        print_color $YELLOW "No playground selected."
		exit 1
    fi

	local selected_name=$(get_select_name $selected)
	local full_path=$(get_full_path $selected)

	tmux_running=$(pgrep tmux)
	if [[ -z $TMUX ]] || [[ -z $tmux_running ]]; then
		if tmux has-session -t=$selected_name 2> /dev/null; then
			tmux kill-session -s "$selected_name" -c $full_path
		fi
	fi

	if [[ -d "$full_path" ]]; then
		rm -rf "$full_path"
	fi
}

# Open fuzzy finder for all playgrounds
open_fuzzy_finder() {
	local selected=$(fuzzy_finder)

    if [[ -z "$selected" ]]; then
        print_color $YELLOW "No playground selected."
		exit 1
    fi

	create_tmux_session $selected
}

# Create a new group
create_group() {
    local group_name=$1
    if [[ -z "$group_name" ]]; then
        group_name=$(gum input --prompt="Enter group name: " --placeholder="group name")
    fi

    if [[ -z "$group_name" ]]; then
        print_color $RED "Error: Group name cannot be empty"
        exit 1
    fi

    local group_path="$PLAYGROUND_BASE/$group_name"
    if [[ -d "$group_path" ]]; then
        print_color $YELLOW "Group '$group_name' already exists"
    else
        mkdir -p "$group_path"
        print_color $GREEN "Created group: $group_name"
    fi
}

# Clone a git repository as a new playground
git_clone_playground() {
    local repo_url=$1
    local group=${2-:git}
    if [[ -z "$repo_url" ]]; then
        repo_url=$(gum input --prompt="Enter git repository URL: " --placeholder="https://github.com/user/repo.git")
    fi

    if [[ -z "$repo_url" ]]; then
        print_color $RED "Error: Repository URL cannot be empty"
        exit 1
    fi

    # Extract repository name from URL
    local repo_name=$(basename "$repo_url" .git)

    # Ask for group
    local groups=($(list_groups))
    if [[ ${#groups[@]} -gt 0 ]]; then
        local options=("${groups[@]}" "Create new group")
        local selected=$(gum choose --header="Select group:" "${options[@]}")
        if [[ "$selected" == "Create new group" ]]; then
            group=$(gum input --prompt="Enter new group name: " --placeholder="group name")
            if [[ -z "$group" ]]; then
                group="git"
            fi
        elif [[ -n "$selected" ]]; then
            group="$selected"
        fi
    fi

    local timestamp=$(get_timestamp)
    local dir_name="${timestamp}_${repo_name}"
    local full_path="$PLAYGROUND_BASE/$group/$dir_name"

    print_color $BLUE "Cloning repository..."
    if git clone "$repo_url" "$full_path"; then
        print_color $GREEN "Successfully cloned repository to: $full_path"
        cd "$full_path"
        print_color $BLUE "Changed to: $full_path"
    else
        print_color $RED "Failed to clone repository"
        exit 1
    fi
}

# Show help
usage() {
	cat << EOF
playground - Manage playground directories

USAGE:
      playground [options] [command] [args...]

OPTIONS:
      -h, --help              Show this help message
      -b, --base-dir <dir>    Set playground base directory (default: $HOME/devenv/playground)

COMMANDS:
      (no command)            Open fuzzy finder to select playground
      new <name> [group]      Create new playground with timestamp
      grp [group_name]        Create new group
      git [repo_url] [group]  Clone git repository as playground
      rm                      Remove playground via fuzzy finder

EXAMPLES:
      playground new myproject python
      playground new experiment
      playground grp javascript
      playground git https://github.com/user/repo.git
      playground --base-dir /tmp/playground new test

Playground base directory: $PLAYGROUND_BASE
EOF
}

# Parse options
parse_options() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                usage
                exit 0
                ;;
            -b|--base-dir)
                if [[ -n "$2" && "$2" != -* ]]; then
                    PLAYGROUND_BASE="$2"
                    shift 2
                else
                    print_color $RED "Error: --base-dir requires a directory argument"
                    exit 1
                fi
                ;;
            -*)
                print_color $RED "Unknown option: $1"
                echo ""
                usage
                exit 1
                ;;
            *)
                break
                ;;
        esac
    done

    # Remaining arguments are command and args
    COMMAND="$1"
    shift
    ARGS=("$@")
}

# Main script logic
main() {
    parse_options "$@"

    init_playground

    case "${COMMAND:-}" in
        "new")
            new_playground "${ARGS[0]}" "${ARGS[1]}"
            ;;
        "grp")
            create_group "${ARGS[0]}"
            ;;
        "git")
            git_clone_playground "${ARGS[0]}" "${ARGS[1]}"
            ;;
        "rm")
            remove_fuzzy_finder
            ;;
        "")
            open_fuzzy_finder
            ;;
        *)
            print_color $RED "Unknown command: $COMMAND"
            echo ""
            usage
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"
