#!/bin/zsh

function getTheme () {
	OS=$(uname -s)
	if [[ $OS == "Linux" ]]; then
		[[ $DESKTOP_SESSION == "gnome" ]] && theme=$(gsettings get org.gnome.desktop.interface color-scheme)
		# kde
	else
	 # Darwin
	fi
	[[ "$theme" == "'prefer-dark'" ]] && theme="dark" || theme="light"
	echo $theme
}

function goingDark () {
	if [ "$#" -gt 0 ]; then
		gsettings set org.gnome.desktop.interface color-scheme prefer-dark
	fi
	echo "1" > ~/.terminal_theme
	export BAT_THEME="Dracula"
	export DELTA_FEATURE="dark-mode"
	export DARK_THEME="1"
	export CATPPUCCIN="mocha"
	sed -i '1s/.*/import = [ "~\/.config\/alacritty\/cattpuccin-mocha.toml" ]/' ~/.config/alacritty/alacritty.toml
}

function letThereBeLight () {
	if [ "$#" -gt 0 ]; then
		gsettings set org.gnome.desktop.interface color-scheme default
	fi
	echo "0" > ~/.terminal_theme
	export BAT_THEME="GitHub"
	export DELTA_FEATURE="light-mode"
	export DARK_THEME="0"
	export CATPPUCCIN="latte"
	sed -i '1s/.*/import = [ "~\/.config\/alacritty\/cattpuccin-latte.toml" ]/' ~/.config/alacritty/alacritty.toml
}

function switchTheme () {
	[[ "$DARK_THEME" == "1" ]] && letThereBeLight foo || goingDark bar
}

function getBranch () {
  git_branch_icon='î‚ '
  git_branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
  [[ -n "$git_branch" ]] && echo "$git_branch_icon $git_branch"
}

function startd () {
    sudo systemctl start $1
    sudo systemctl enable $1
	sudo systemctl status $1 | grep "Active" | awk '{printf " Status: %s\n", $2}'
}

function bla () {
	echo "hi"
}

function Home () {
    [[ $# -eq 0 ]] && session="Home" || session=$1
	tmux attach-session -t "$session" &> /dev/null || tmux new -s "$session"
    /usr/bin/focus
}

function myip () {
    curl -s 'https://ipinfo.io' | jq -r '.[]' | head --lines=1
}

function _myip () {
    ip address | grep -o "inet 192.*" | awk '{ print $2 }' | tr / ' ' | xargs
}

function gcm () {
    text=`curl -s curl -s https://whatthecommit.com/ | xmllint --html --xpath '//*[@id="content"]/p[1]/text()' -`
    git add -A && git commit -m "$text"
}

function fcd () {
    RESULTS=$(~/BashScripts/fuzzy-search -d $@)

    [[ -n $RESULTS ]] &&
        cd $RESULTS ||
        echo "No dir was selected"
}

function fvim () {
    RESULTS=$(~/BashScripts/fuzzy-search $@)

    [[ -n $RESULTS ]] &&
        $EDITOR $RESULTS ||
        echo "No file/dir was selected"
}

function myConda () {
    __conda_setup="$('/home/mj/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
    if [ $? -eq 0 ]; then
        eval "$__conda_setup"
    else
        if [ -f "/home/mj/anaconda3/etc/profile.d/conda.sh" ]; then
            . "/home/mj/anaconda3/etc/profile.d/conda.sh"
        else
            export PATH="/home/mj/anaconda3/bin:$PATH"
        fi
    fi
    unset __conda_setup
}

function mcd () {
    mkdir -p $1 && cd $1
}

function pg_docker () {
    echo "Starting postgres docker container"
    echo "Usage: pg_docker [password] [database] [user] [container_name]"

    local password="${1:-postgres}"
    local database="${2:-postgres}"
    local user="${3:-postgres}"
    local container_name="${4:-db}"

    docker run -d \
      -e POSTGRES_PASSWORD=$password \
      -e POSTGRES_DB=$database \
      -e POSTGRES_USER=$user \
      -p 5432:5432 \
      --name $container_name \
      postgres:13-alpine \
}

function dumb () {
    look $1 | awk '{ print length, $0 }' | sort -ns |  cut --delimiter=" " --fields=2 | fzf
}

# WARN: not tested
function customkey () {
    # params: num name command keybindings
    # TODO: the num should be auto

    first_part="org.gnome.settings-daemon.plugins.media-keys.custom-keybinding"
    second_part="/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom"

    gsettings set "$first_past:$seconf_part$1/" "name" "$2"
    gsettings set "$first_past:$seconf_part$1/" "command" "$3"
    gsettings set "$first_past:$seconf_part$1/" "keybindings" "$4"

    all_settings=$(gsettings get org.gnome.settings-daemon.plugins.media-keys custom-keybindings)
    all_settings+=('$second_part$1')

    gsettings set org.gnome.settings-daemon.plugins.media-keys custom-keybindings "$all_settings"
}

function dockerClean () {
    docker images --quiet --filter=dangling=true | xargs --no-run-if-empty docker rmi
 }
