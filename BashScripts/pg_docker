#!/usr/bin/env bash

  # Display help function
usage () {
  cat << EOF
	Starting PostgreSQL Docker container
	Usage: $0 [-i] [database] [user] [password] [port]

	-h Help
	-i interactive mode
EOF
}

interactive=false
while getopts "ih" o; do
  case $o in
	i) interactive=true
		;;
    h) usage
		exit 0
		;;
    *) usage
		exit 1
		;;
  esac
done

# get arguments only
shift $(($OPTIND-1))

PG_DB="$1"
PG_USER="$2"
PG_PASSWD="$3"
PG_PORT="$4"

if [ "$interactive" = true ]; then
	[[ -z "$PG_DB" ]] && read -p "db: " PG_DB
	[[ -z "$PG_USER" ]] && read -p "user: " PG_USER
	[[ -z "$PG_PASSWD" ]] && read -p "password: " PG_PASSWD
	[[ -z "$PG_PORT" ]] && read -p "port: " PG_PORT
fi

PG_DB="${PG_DB:-postgres}"
PG_USER="${PG_USER:-postgres}"
PG_PASSWD="${PG_PASSWD:-postgres}"
PG_PORT="${PG_PORT:-5432}"

CONTAINER_NAME="db-$PG_DB"

# Check if Docker is running
if ! docker info >/dev/null 2>&1; then
  echo "Docker is not running. Please start Docker and try again."
  exit 1
fi

# Check if container name already exists
if [ "$(docker ps -aq -f name="$CONTAINER_NAME")" ]; then
  echo "Container name $CONTAINER_NAME already exists. Appending a random suffix."
  CONTAINER_NAME="${CONTAINER_NAME}-$(shuf -i 1000-9999 -n 1)"
fi

# Check if port is already in use
while lsof -i :"$PG_PORT" >/dev/null 2>&1; do
  echo "Port $PG_PORT is already in use. Incrementing port."
  PG_PORT=$((PG_PORT + 1))
done

# Run the PostgreSQL container
docker run --rm --net=host  -d --name "$CONTAINER_NAME" \
  -e POSTGRES_USER="$PG_USER" \
  -e POSTGRES_PASSWORD="$PG_PASSWD" \
  -e POSTGRES_DB="$PG_DB" \
  -p "$PG_PORT:5432" \
  postgres:13-alpine

echo "PostgreSQL container started with the following details:"
echo "Container Name: $CONTAINER_NAME"
echo "Database: $PG_DB"
echo "User: $PG_USER"
echo "Password: $PG_PASSWD"
echo "Port: $PG_PORT"

